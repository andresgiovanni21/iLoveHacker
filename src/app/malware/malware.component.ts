import {Component, EventEmitter, OnInit, Output} from '@angular/core';
import $ from 'jquery';

@Component({
  selector: 'app-malware',
  templateUrl: './malware.component.html',
  styleUrls: ['./malware.component.css']
})
export class MalwareComponent implements OnInit {


  numero = 1;
  @Output() envInfo = new EventEmitter<number>();
  constructor() { }

  ngOnInit() {

    $(
      function(){
        $( document ).keydown(
          function ( event ) {
            Typer.addText( event ); //Capture the keydown event and call the addText, this is executed on page load
          }
        );
      }
    );

    let Typer={
      text: null,
      accessCountimer:null,
      index:0, // current cursor position
      speed:3, // speed of the Typer
      file:"", //file, must be setted
      init: function(){// inizialize Hacker Typer
        let accessCountimer = setInterval(function(){Typer.updLstChr();},500); // inizialize timer for blinking cursor
        $.get(Typer.file,function(){// get the text file
          Typer.text="def solucionesTeraton(problema):\n"+
            "\n"+
            "    ordenarPizza()\n"+
            "\n"+
            "    while True:\n"+
            "\n"+
            "        objetivos = planeacion(problema)\n"+
            "\n"+
            "        for meta in objetivos:\n"+
            "            escuchar()\n"+
            "            analizar()\n"+
            "            crear()\n"+
            "\n"+
            "        if revision(objetivos) == 'Wow!':\n"+
            "\n"+
            "            return solucion, felicidad\n"+
            "            break\n"+
            "\n"+
            "        else:\n"+
            "            print('Hmm...no esta suficientemente sorprendente')\n"+
            "            continue\n"+
            "\n"+
            "solucionesTeraton(TuProblema)";// save the textfile in Typer.text
        });
      },

      content:function(){
        return $(".console").html();// get console content
      },

      write:function(str){// append to console content
        $(".console").append(str);
        return false;
      },


      addText:function(key){//Main function to add the code
        if(Typer.text){ // otherway if text is loaded
          let cont=Typer.content(); // get the console content
          if(cont.substring(cont.length-1,cont.length)=="|") // if the last char is the blinking cursor
            $(".console").html($(".console").html().substring(0,cont.length-1)); // remove it before adding the text
          if(key.keyCode == 32) {
            key.preventDefault();
            return false;
          }
          if(key.keyCode!=8){ // if key is not backspace
            Typer.index+=Typer.speed;	// add to the index the speed
          }else{
            if(Typer.index>0) // else if index is not less than 0
              Typer.index-=Typer.speed;//	remove speed for deleting text

          }
          let text=$("<div/>").text(Typer.text.substring(0,Typer.index)).html();// parse the text for stripping html enities
          let rtn= new RegExp("\n", "g"); // newline regex
          let rts= new RegExp("\\s", "g"); // whitespace regex
          let rtt= new RegExp("\\t", "g"); // tab regex
          $(".console").html(text.replace(rtn,"<br/>").replace(rtt,"&nbsp;&nbsp;&nbsp;&nbsp;").replace(rts,"&nbsp;"));// replace newline chars with br, tabs with 4 space and blanks with an html blank

        }

      },

      updLstChr:function(){ // blinking cursor
        let cont=this.content(); // get console
        if(cont.substring(cont.length-1,cont.length)=="|") // if last char is the cursor
          $(".console").html($(".console").html().substring(0,cont.length-1)); // remove it
        else
          this.write("|"); // else write it
      }
    }

    Typer.init();
  }

  clicBot(){

    this.envInfo.emit(this.numero)

  }


}
